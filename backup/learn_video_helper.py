import requests
from bs4 import BeautifulSoup
import os
import re
from urllib.parse import urlparse
from tqdm import tqdm


class VideoDownloader:
    def __init__(self, url):
        self.url = url

    def fetch_entry_id_and_title(self):
        print("üåç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL... üîÑ")
        response = requests.get(self.url)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
            return None, None

        print("üßê –ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã... üìÑ")
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ entryId
        entry_id_meta = soup.find('meta', {'name': 'entryId'})
        entry_id = entry_id_meta.get('content') if entry_id_meta else None

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_meta = soup.find('meta', {'property': 'og:title'})
        title = title_meta.get('content') if title_meta else 'video'
        title = re.sub(r'[\\/*?:"<>|]', "", title)  # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å–∏–º–≤–æ–ª–æ–≤
        title = re.sub(r'\s+', " ", title) # –ó–∞–º–µ–Ω–∞ —Ç–∞–±—É–ª—è—Ü–∏–∏ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º

        if entry_id:
            print(f"üîç –ù–∞–π–¥–µ–Ω entryId: {entry_id}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ entryId.")

        return entry_id, title

    def fetch_video_data(self, entry_id):
        api_url = f"https://learn.microsoft.com/api/video/public/v1/entries/{entry_id}?isAMS=false"
        response = requests.get(api_url)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            return None

    def download_file(self, file_url, output_path):
        print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ {file_url}...")
        try:
            response = requests.get(file_url, stream=True)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ HTTP
            os.makedirs(os.path.dirname(output_path), exist_ok=True)

            total_size = int(response.headers.get('content-length', 0))
            chunk_size = 8192

            with open(output_path, 'wb') as f, tqdm(
                    total=total_size, unit='B', unit_scale=True, desc="–°–∫–∞—á–∏–≤–∞–Ω–∏–µ"
            ) as progress_bar:
                for chunk in response.iter_content(chunk_size=chunk_size):
                    if chunk:
                        f.write(chunk)
                        progress_bar.update(len(chunk))

            print(f"‚úÖ –§–∞–π–ª {output_path} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

    def get_file_extension(self, url):
        path = urlparse(url).path
        return os.path.splitext(path)[1]

    def run(self, download_high_quality=True, download_medium_quality=False, download_low_quality=False,
            download_audio=True, download_captions=True, preferred_languages=None):
        entry_id, title = self.fetch_entry_id_and_title()
        if entry_id:
            video_data = self.fetch_video_data(entry_id)
            if video_data:
                video_url = None

                if download_high_quality:
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                    video_url = video_data['publicVideo']['highQualityVideoUrl']
                    if video_url:
                        self.download_file(video_url,
                                           f'videos/{title}_high_quality{self.get_file_extension(video_url)}')
                    else:
                        print("‚ö†Ô∏è –í–∏–¥–µ–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

                if download_medium_quality or (download_high_quality and not video_url):
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ —ç—Ç–∞ –æ–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –µ—Å–ª–∏ –≤–∏–¥–µ–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                    medium_quality_video_url = video_data['publicVideo']['mediumQualityVideoUrl']
                    if medium_quality_video_url:
                        self.download_file(medium_quality_video_url,
                                           f'videos/{title}_medium_quality{self.get_file_extension(medium_quality_video_url)}')
                    else:
                        print("‚ö†Ô∏è –í–∏–¥–µ–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

                if download_low_quality:
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                    low_quality_video_url = video_data['publicVideo']['lowQualityVideoUrl']
                    if low_quality_video_url:
                        self.download_file(low_quality_video_url,
                                           f'videos/{title}_low_quality{self.get_file_extension(low_quality_video_url)}')
                    else:
                        print("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

                if download_audio:
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
                    audio_url = video_data['publicVideo']['audioUrl']
                    if audio_url:
                        self.download_file(audio_url, f'audios/{title}_audio{self.get_file_extension(audio_url)}')
                    else:
                        print("üîá –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

                if download_captions:
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                    captions = video_data['publicVideo'].get('captions', [])
                    for caption in captions:
                        language = caption['language']
                        if preferred_languages is None or language in preferred_languages:
                            caption_url = caption['url']
                            self.download_file(caption_url,
                                               f'subtitles/{title}_{language}{self.get_file_extension(caption_url)}')
                        else:
                            print(f"‚ö†Ô∏è –°—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ —è–∑—ã–∫–µ {language} –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ.")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ.")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –¥–ª—è JSON API.")


if __name__ == "__main__":
    #url = "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-102-module-11"
    urls = [
        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-1/",
        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-2/",
        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-3/",
        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-4/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-5/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-6/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-7/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-8/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-9/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-10/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-11/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-12/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-13/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-14/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-15/",
#        "https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/ai-050-module-16/"
#        "https://learn.microsoft.com/en-us/shows/AI-Show/Bring-Anomaly-Detector-on-premise-with-containers-support"
        #"https://learn.microsoft.com/en-us/shows/on-demand-instructor-led-training-series/dp-600-module-19"
    ]
    preferred_languages = ['en-us', 'ru-ru']  # –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π
    for url in urls:
        downloader = VideoDownloader(url)
        downloader.run(download_high_quality=True,
                       download_medium_quality=False,
                       download_low_quality=False,
                       download_audio=True,
                       download_captions=True,
                       preferred_languages=preferred_languages)
